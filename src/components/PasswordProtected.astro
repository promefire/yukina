---
import { encrypt } from '../utils/encrypt';

interface Props {
  password: string;
}

const { password } = Astro.props;

// 获取 slot 中的 HTML 内容
const html = await Astro.slots.render('default');
const encryptedHtml = await encrypt(html, password);
---

<!-- 将加密内容存储在 meta 标签中 -->
<meta name="encrypted-content" content={encryptedHtml} />

<div id="password-protected-wrapper">
  <div id="password-form" class="password-form">
    <div class="password-container">
      <div class="lock-icon">🔒</div>
      <p>此文章已加密</p>
      <p>请输入密码查看内容</p>
      <div class="input-group">
        <input 
          id="password-input" 
          type="password" 
          placeholder="请输入密码"
          class="password-input"
          autocomplete="off"
          autofocus
        />
        <button id="decrypt-btn" class="decrypt-btn">解锁</button>
      </div>
      <div id="error-message" class="error-message" style="display: none;"></div>
    </div>
  </div>
  
  <div id="decrypted-content" class="decrypted-content" style="display: none;">
    <!-- 解密后的内容将在这里显示 -->
  </div>
</div>

<script>
  // 客户端解密函数
  async function decrypt(encryptedData, password) {
    try {
      const key = password.length >= 16 ? password.slice(0, 16) : password.padEnd(16, '0');
      
      const combinedData = new Uint8Array(
        atob(encryptedData).split('').map(char => char.charCodeAt(0))
      );
      
      const iv = combinedData.slice(0, 16);
      const encrypted = combinedData.slice(16);
      
      const keyBuffer = new TextEncoder().encode(key);
      const cryptoKey = await crypto.subtle.importKey(
        'raw',
        keyBuffer,
        { name: 'AES-CBC', length: 128 },
        false,
        ['decrypt']
      );
      
      const decryptedData = await crypto.subtle.decrypt(
        { name: 'AES-CBC', iv },
        cryptoKey,
        encrypted
      );
      
      return new TextDecoder().decode(decryptedData);
    } catch (error) {
      throw new Error('解密失败，请检查密码是否正确');
    }
  }

  // 初始化函数
  function initPasswordProtected() {
    const passwordInput = document.getElementById('password-input');
    const decryptBtn = document.getElementById('decrypt-btn');
    const errorMessage = document.getElementById('error-message');
    const passwordForm = document.getElementById('password-form');
    const decryptedContent = document.getElementById('decrypted-content');
    
    // 如果元素不存在，说明不是加密页面，直接返回
    if (!passwordInput || !decryptBtn || !passwordForm || !decryptedContent) {
      return;
    }
    
    // 获取加密内容
    const encryptedData = document.querySelector('meta[name="encrypted-content"]')?.getAttribute('content');
    
    if (!encryptedData) {
      showError('加密内容不存在');
      return;
    }

    async function handleDecrypt() {
      const password = passwordInput.value.trim();
      if (!password) {
        showError('请输入密码');
        return;
      }

      try {
        decryptBtn.textContent = '解密中...';
        decryptBtn.disabled = true;
        
        const decryptedHtml = await decrypt(encryptedData, password);
        
        // 隐藏密码表单，显示解密内容
        passwordForm.style.display = 'none';
        decryptedContent.innerHTML = decryptedHtml;
        decryptedContent.style.display = 'block';
        
        // 重新执行可能的脚本
        const scripts = decryptedContent.querySelectorAll('script');
        scripts.forEach(script => {
          const newScript = document.createElement('script');
          if (script.src) {
            newScript.src = script.src;
          } else {
            newScript.textContent = script.textContent;
          }
          document.head.appendChild(newScript);
        });
        
      } catch (error) {
        showError(error.message || '解密失败，请检查密码是否正确');
      } finally {
        decryptBtn.textContent = '解锁';
        decryptBtn.disabled = false;
      }
    }

    function showError(message) {
      errorMessage.textContent = message;
      errorMessage.style.display = 'block';
      setTimeout(() => {
        errorMessage.style.display = 'none';
      }, 3000);
    }

    // 移除可能存在的旧事件监听器，避免重复绑定
    decryptBtn.removeEventListener('click', handleDecrypt);
    passwordInput.removeEventListener('keypress', handleKeyPress);
    
    function handleKeyPress(e) {
      if (e.key === 'Enter') {
        handleDecrypt();
      }
    }

    // 绑定事件
    decryptBtn.addEventListener('click', handleDecrypt);
    passwordInput.addEventListener('keypress', handleKeyPress);
  }

  // 多种方式确保初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPasswordProtected);
  } else {
    // DOM已经加载完成，立即执行
    initPasswordProtected();
  }
  
  // 监听 swup 页面切换事件
  document.addEventListener('swup:enable', () => {
    if (window.swup?.hooks) {
      window.swup.hooks.on('content:replace', initPasswordProtected);
    }
  });
  
  // 如果 swup 已经启用，直接注册钩子
  if (window.swup?.hooks) {
    window.swup.hooks.on('content:replace', initPasswordProtected);
  }
</script>

<style>
  .password-form {
    @apply flex items-center justify-center min-h-[400px];
  }
  
  .password-container {
    @apply bg-[var(--card-color)] rounded-2xl p-8 text-center max-w-md mx-auto;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  .lock-icon {
    @apply text-4xl mb-4;
  }
  
  .password-container h3 {
    @apply text-2xl font-bold mb-4 text-[var(--primary-color)];
  }
  
  .password-container p {
    @apply text-[var(--text-color)] mb-6;
  }
  
  .input-group {
    @apply flex gap-2 mb-4;
  }
  
  .password-input {
    @apply flex-1 px-4 py-2 border border-[var(--border-color)] rounded-lg;
    @apply bg-[var(--bg-color)] text-[var(--text-color)];
    @apply focus:outline-none focus:ring-2 focus:ring-[var(--primary-color)];
  }
  
  .decrypt-btn {
    @apply px-6 py-2 bg-[var(--primary-color)] text-white rounded-lg;
    @apply hover:bg-[var(--primary-color-hover)] transition-colors;
    @apply disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .error-message {
    @apply text-red-500 text-sm mt-2;
  }
  
  .decrypted-content {
    @apply w-full;
  }
</style>